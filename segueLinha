using System;
using System.Device.Gpio;
using nanoFramework.Hardware.Esp32;
using System.Threading;
using System.Device.Adc;
using System.Device.Pwm;
using System.Diagnostics;

GpioController gpio = new GpioController();

AdcController adc = new AdcController();

Configuration.SetPinFunction(27, DeviceFunction.PWM3);
Configuration.SetPinFunction(14, DeviceFunction.PWM3);
Configuration.SetPinFunction(4, DeviceFunction.PWM3);
Configuration.SetPinFunction(2, DeviceFunction.PWM3);

AdcChannel sensorEsq = adc.OpenChannel(6);//GPIO 34
AdcChannel sensorCen = adc.OpenChannel(7);//GPIO 35
AdcChannel sensorDir = adc.OpenChannel(3);//GPIO 39

GpioPin mEsq1 = gpio.OpenPin(27, PinMode.Output);
GpioPin mEsq2 = gpio.OpenPin(14, PinMode.Output);
GpioPin mDir1 = gpio.OpenPin(4, PinMode.Output);
GpioPin mDir2 = gpio.OpenPin(2, PinMode.Output);

double velReta = 0.4, velCurva = 0.50;
int corte = 2000;

//Array para armazenar as leituras dos sensores
string estado = "!", estadoAnterior = "!";

bool[] polaridades = { false, false, false };//Polaridades dos sensores, 0 maior número indica branco, 1 maior número indica preto

sensorCor[] sensoresCor = { new sensorCor(polaridades[0], definirCor(sensorEsq.ReadValue(), 0)), new sensorCor(polaridades[0], definirCor(sensorCen.ReadValue(), 1)), new sensorCor(polaridades[0], definirCor(sensorDir.ReadValue(), 2)) };

while (true)
{
    if (mEsq1 != null && mEsq2 != null && mDir1 != null && mDir2 != null)
    {
        lerSensores();
        seguirLinha();
    }
    else
    {
        if(mEsq1 == null) Debug.WriteLine("mEsq1 nulo"); mEsq1 = gpio.OpenPin(27);
        if (mEsq2 == null) Debug.WriteLine("mEsq2 nulo"); mEsq2 = gpio.OpenPin(14);
        if (mDir1 == null) Debug.WriteLine("mDir1 nulo"); mDir1 = gpio.OpenPin(4);
        if (mDir2 == null) Debug.WriteLine("mDir2 nulo"); mDir2 = gpio.OpenPin(2);
    }
}

//void startCnls()
//{
//    mEsq1.Start();
//    mEsq2.Start();
//    mDir1.Start();
//    mDir2.Start();
//}

//void stopCnls()
//{
//    mEsq1.Stop();
//    mEsq2.Stop();
//    mDir1.Stop();
//    mDir2.Stop();
//}

void lerSensores()
{
    sensoresCor[0] = new sensorCor(polaridades[0], definirCor(sensorEsq.ReadValue(), 0));
    sensoresCor[1] = new sensorCor(polaridades[1], definirCor(sensorCen.ReadValue(), 1));
    sensoresCor[2] = new sensorCor(polaridades[2], definirCor(sensorDir.ReadValue(), 2));

    estado = definirEstado();

    Console.WriteLine($"Esquerda: {sensoresCor[0].retorno} | Centro: {sensoresCor[1].retorno} | Direita: {sensoresCor[2].retorno} | Estado: {estado}");
}

string definirCor(int input, int indice)
{
    if (input < corte)
    {
        if (polaridades[indice]) return "Branco";
        else return "Preto";
    }
    else
    {
        if (polaridades[indice]) return "Preto";
        else return "Branco";
    }
}

string definirEstado()
{
    if (sensoresCor[0].retorno == "Preto" && sensoresCor[1].retorno == "Preto" && sensoresCor[2].retorno == "Preto")
    {
        return "cruz";
    }
    else if (sensoresCor[0].retorno == "Branco" && sensoresCor[1].retorno == "Branco" && sensoresCor[2].retorno == "Branco")
    {
        return "gap";
    }
    else if (sensoresCor[1].retorno == "Preto")
    {
        if (sensoresCor[0].retorno == "Preto") return "90Esq";
        else if (sensoresCor[2].retorno == "Preto") return "90Dir";
        else return "reta";
    }
    else return estadoAnterior;
    estadoAnterior = estado;
}

void seguirLinha()
{
    //startCnls();
    if (estado == "cruz")
    {
        lopenFrente(1000);
    }
    else if (estado == "90Esq")
    {
        lopenEsq(500);
    }
    else if (estado == "90Dir")
    {
        lopenDir(500);
    }
    else if (estado == "corrigirEsq")
    {
        lopenEsq(200);
    }
    else if (estado == "corrigirDir")
    {
        lopenDir(200);
    }
    else if (estado == "gap")
    {
        lopenFrente(500);
    }
    //stopCnls();
}

void lopenFrente(int time)
{
    mEsq1.Write(PinValue.High);
    mEsq2.Write(PinValue.Low);
    mDir1.Write(PinValue.High);
    mDir2.Write(PinValue.Low);
    Thread.Sleep(time);
    //parar();
}

void lopenTras(int time)
{
    mEsq1.Write(PinValue.Low);
    mEsq2.Write(PinValue.High);
    mDir1.Write(PinValue.Low);
    mDir2.Write(PinValue.High);
    Thread.Sleep(time);
    //parar();
}

void lopenDir(int time)
{
    mEsq1.Write(PinValue.High);
    mEsq2.Write(PinValue.Low);
    mDir1.Write(PinValue.Low);
    mDir2.Write(PinValue.High);
    Thread.Sleep(time);
    //parar();
}

void lopenEsq(int time)
{
    mEsq1.Write(PinValue.Low);
    mEsq2.Write(PinValue.High);
    mDir1.Write(PinValue.High);
    mDir2.Write(PinValue.Low);
    Thread.Sleep(time);
    //parar();
}

void parar()
{
    mEsq1.Write(PinValue.Low);
    mEsq2.Write(PinValue.Low);
    mDir1.Write(PinValue.Low);
    mDir2.Write(PinValue.Low);
}

struct sensorCor
{
    public bool polaridade;
    public string retorno;
    public sensorCor(bool p, string r)
    {
        polaridade = p;
        retorno = r;
    }
}
